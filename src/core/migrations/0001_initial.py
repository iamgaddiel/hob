# Generated by Django 3.2.4 on 2021-06-03 20:38

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('profile_image', models.ImageField(default='player_profile.png', upload_to='player_profile_image')),
                ('age', models.PositiveIntegerField(default=1)),
                ('height', models.FloatField()),
                ('weight', models.FloatField()),
                ('nationality', models.CharField(max_length=30)),
                ('player_position', models.CharField(max_length=40)),
                ('preferred_foot', models.CharField(choices=[('left_foot', 'left_foot'), ('right_foot', 'right_foot')], default=('right_foot', 'right_foot'), max_length=12)),
                ('previous_club', models.CharField(max_length=500)),
                ('previous_club_start', models.DateField(blank=True, default='N/A')),
                ('previous_club_finish', models.DateField(blank=True, default='N/A')),
                ('current_club', models.CharField(default='N/A', help_text='current club name', max_length=500)),
                ('current_club_start_date', models.DateField(blank=True)),
                ('awards', models.TextField(help_text='Enter new award on a new line')),
                ('hobbies', models.CharField(help_text='seporate hobbies with a comma', max_length=600)),
                ('educational_qualification', models.CharField(choices=[('SSCE', 'SSCE'), ('Bsc', 'Bsc'), ('OND', 'OND'), ('HND', 'HND'), ('Phd', 'Phd')], max_length=30)),
                ('referees', models.TextField(help_text='format: name - phone, each referee should be on a new line')),
                ('video_clip_link', models.CharField(max_length=100, unique=True)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
